# backend/app/models/document_asset_context.py
import uuid
from datetime import datetime
from sqlalchemy import Column, DateTime, ForeignKey, PrimaryKeyConstraint, Text, String
from sqlalchemy.orm import relationship
from .base import Base, UUIDChar

class DocumentAssetContext(Base):
    """
    Represents the context and analysis result of an Asset within a specific Document.
    This table replaces both the old DocumentAssetLink and AssetAnalysisTask tables.
    """
    __tablename__ = "document_asset_contexts"

    # --- Composite Primary Key ---
    document_id = Column(UUIDChar, ForeignKey("documents.id", ondelete="CASCADE"), primary_key=True)
    asset_id = Column(UUIDChar, ForeignKey("assets.id", ondelete="CASCADE"), primary_key=True)

    # --- Relationship Fields ---
    # This field links this context record to the Job that performs the analysis.
    analysis_job_id = Column(UUIDChar, ForeignKey("jobs.id"), nullable=True, unique=True)

    # --- Analysis Result Fields (nullable) ---
    analysis_result = Column(Text, nullable=True, comment="The description text generated by VLM analysis.")
    model_provider = Column(String, nullable=True, comment="The provider of the model used for analysis.")
    model_name = Column(String, nullable=True, comment="The specific model name used for analysis.")

    # --- Timestamps ---
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False, comment="Timestamp when the asset was first linked to the document.")
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False, comment="Timestamp of the last update.")

    # --- Relationships ---
    document = relationship("Document", back_populates="asset_contexts")
    asset = relationship("Asset", back_populates="document_contexts")
    job = relationship("Job", foreign_keys=[analysis_job_id])

    __table_args__ = (
        PrimaryKeyConstraint('document_id', 'asset_id'),
    )
