services:
  redis:
    image: redis:7-alpine
    container_name: kosmos-redis
    networks:
      kosmos-network:
        ipv4_address: 10.255.3.2
    ports:
      - "56379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  postgresql:
    image: postgres:15-alpine
    container_name: kosmos-postgresql
    networks:
      kosmos-network:
        ipv4_address: 10.255.3.4
    ports:
      - "55432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: kosmos
      POSTGRES_USER: kosmos
      POSTGRES_PASSWORD: kosmos123
    restart: unless-stopped

  # Knowledge Base Service (Backend)
  knowledge-base:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: kosmos-knowledge-base
    depends_on:
      - postgresql
      - redis
    environment:
      # Database Configuration - explicitly set DATABASE_URL to PostgreSQL
      - DATABASE_URL=postgresql://kosmos:kosmos123@kosmos-postgresql:5432/kosmos
      # Also set SQLite to None to prevent fallback
      - SQLITE_DATABASE_URL=None
      # PostgreSQL Configuration (for compatibility with application config that builds URL)
      - POSTGRES_USER=kosmos
      - POSTGRES_PASSWORD=kosmos123
      - POSTGRES_DB=kosmos
      - POSTGRES_HOST=kosmos-postgresql
      - POSTGRES_PORT=5432
      # Redis Configuration
      - REDIS_HOST=kosmos-redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      # MinIO Configuration
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      # Milvus Configuration - Use host IP and exposed port
      - MILVUS_HOST=10.17.99.13
      - MILVUS_PORT=59530
      - MILVUS_USER=root
      - MILVUS_PASSWORD=Milvus
      # Security Configuration
      - CREDENTIAL_ENCRYPTION_KEY=I1gkb5x7CG3qimoXHK-VIhbN0UQuYLzkQnNOGxrDWdA=
      # Other configurations
      - KOSMOS_API_URL=http://knowledge-base:8011/api/v1/
    ports:
      - "8011:8011"
    volumes:
      - .:/app
      - /app/.venv  # Exclude virtual environment from sync
    networks:
      - kosmos-network
    restart: no
    command: ["/app/backend/startup.sh"]

  # Assessment Service
  assessment-service:
    build:
      context: .
      dockerfile: assessment_service/Dockerfile
    container_name: kosmos-assessment-service
    depends_on:
      - postgresql
      - redis
      - knowledge-base
    environment:
      - DATABASE_URL=postgresql://kosmos:kosmos123@kosmos-postgresql:5432/kosmos
      - REDIS_URL=redis://kosmos-redis:6379/0
      - KOSMOS_API_URL=http://knowledge-base:8011/api/v1/
      - AGENT_BASE_URL=http://10.17.99.25:30000/v1
      - AGENT_API_KEY=dummy
      - AGENT_MODEL_NAME=Qwen3-30b-coder
    ports:
      - "8015:8015"
    volumes:
      - .:/app
      - /app/.venv  # Exclude virtual environment from sync
    networks:
      - kosmos-network
    restart: no

  # Knowledge Base Ingestion Workers
  knowledge-base-workers:
    build:
      context: .
      dockerfile: backend/Dockerfile.knowledge-worker
    container_name: kosmos-knowledge-base-workers
    depends_on:
      - postgresql
      - redis
      - knowledge-base
    environment:
      - DATABASE_URL=postgresql://kosmos:kosmos123@kosmos-postgresql:5432/kosmos
      - REDIS_HOST=kosmos-redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - KOSMOS_API_URL=http://knowledge-base:8011/api/v1/
      # MinIO Configuration
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      # Milvus Configuration - Use host IP and exposed port
      - MILVUS_HOST=10.17.99.13
      - MILVUS_PORT=59530
      - MILVUS_USER=root
      - MILVUS_PASSWORD=Milvus
      # Security Configuration
      - CREDENTIAL_ENCRYPTION_KEY=I1gkb5x7CG3qimoXHK-VIhbN0UQuYLzkQnNOGxrDWdA=
      # MinerU Configuration
      - MINERU_SERVER_URL=http://10.17.99.13:30005
      - MINERU_SOURCE=huggingface
    extra_hosts:
      - "mineru-vllm-server:172.17.0.1"
    networks:
      - kosmos-network
    restart: unless-stopped

  # Agent Runtime (Dramatiq Workers) - Unified Container
  agent-runtime:
    build:
      context: .
      dockerfile: assessment_service/agent_runtime/Dockerfile
    image: kosmos-agent-runtime
    container_name: kosmos-agent-runtime
    environment:
      - DATABASE_URL=postgresql://kosmos:kosmos123@kosmos-postgresql:5432/kosmos
      - REDIS_URL=redis://kosmos-redis:6379/0
      - KOSMOS_API_URL=http://knowledge-base:8011/api/v1/
      # Agent Model Configuration
      - OPENAI_BASE_URL=http://10.17.99.25:30000/v1
      - OPENAI_API_KEY=dummy
      - OPENAI_MODEL_NAME=Qwen3-30b-coder
      - KOSMOS_ASSESSMENT_API_URL=http://assessment-service:8015/api/v1/
      - PYTHONPATH=/app
      - PATH=/app/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    volumes:
      - ./logs:/app/logs
    networks:
      - kosmos-network
    restart: unless-stopped
    command: ["/app/assessment_service/start_agent_runtime.sh"]

  # MinIO 服务（根据需要取消注释）
  # minio:
  #   image: minio/minio:RELEASE.2023-09-04T19-57-37Z
  #   container_name: kosmos-minio
  #   networks:
  #     - kosmos-network
  #   ports:
  #     - "59000:9000"
  #     - "9001:9001"
  #   volumes:
  #     - minio_data:/data
  #   environment:
  #     MINIO_ROOT_USER: admin
  #     MINIO_ROOT_PASSWORD: password123
  #   command: server /data --console-address ":9001"
  #   restart: unless-stopped

networks:
  kosmos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.255.3.0/24
  bridge:
    external: true

volumes:
  redis_data:
  postgresql_data:
  # minio_data: